generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Store {
  id        String   @id @default(cuid())
  name      String
  location  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  users      User[]
  inventory  LiveInventory[]
  expired    ExpiredItem[]
  promoItems PromoItem[]
  gasPrices  GasPrice[]
}

model User {
  id       String  @id @default(cuid())
  email    String  @unique
  name     String
  password String
  role     Role
  storeId  String?
  store    Store?  @relation(fields: [storeId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Role {
  OWNER
  MANAGER
  CASHIER
  EMPLOYEE
}

model Product {
  id             String   @id @default(cuid())
  name           String
  sku            String   @unique
  category       String
  brand          String
  quantityPerBox Int      // ‚úÖ Fixed quantity per box/case (e.g., 12 bars, 24 bottles)
  defaultCost    Float
  defaultPrice   Float
  returnable     Boolean

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  inventory    LiveInventory[]
  expiredItems ExpiredItem[]
}
model LiveInventory {
  id           String   @id @default(cuid())
  productId    String
  product      Product  @relation(fields: [productId], references: [id])

  storeId      String?
  store        Store?   @relation(fields: [storeId], references: [id])

  expiry       DateTime
  quantity     Int
  costPrice    Float
  retailPrice  Float       // ‚úÖ store‚Äôs actual sale price (live)
  credit       Boolean
  deliveryDate DateTime

  // üß† Useful for analytics and automation
  lastSoldAt   DateTime?   // ‚úÖ optional ‚Äî helps detect dead stock or trends
  reorderFlag  Boolean?    // ‚úÖ optional ‚Äî AI/autoreorder flag
  notes        String?     // ‚úÖ optional ‚Äî comments like ‚Äúpending return‚Äù or ‚Äúdamaged‚Äù

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model PromoItem {
  id           String   @id @default(cuid())
  product      String
  sku          String
  expiry       DateTime
  quantity     Int
  credit       Boolean
  urgency      String
  strategy     String
  promoType    String
  promoPrice   Float
  costPrice    Float
  regularPrice Float
  storeId      String? // optional foreign key
  store        Store?   @relation(fields: [storeId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ExpiredItem {
  id        String   @id @default(cuid())
  productId String
  product   Product  @relation(fields: [productId], references: [id])
  quantity  Int
  expiry    DateTime
  credit    Boolean
  removedAt DateTime @default(now())

  storeId String
  store   Store  @relation(fields: [storeId], references: [id])
}

model GasPrice {
  id        String   @id @default(cuid())
  name      String
  type      String // e.g., "Regular", "Plus", "Premium", "Diesel"
  priceCard Float // Card price
  priceCash Float // Cash price
  storeId   String
  store     Store    @relation(fields: [storeId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}
// üóë Logs all deleted inventory items
model DeletedInventory {
  id              String   @id @default(cuid())
  liveItemId      String?  // ID from LiveInventory
  productId       String?
  productName     String?
  sku             String?
  quantity        Int?
  costPrice       Float?
  retailPrice     Float?
  credit          Boolean?
  storeId         String?
  deliveryDate    DateTime? // original delivery date
  expiryDate      DateTime? // original expiry date
  reason          String?   // optional: "manual delete", "duplicate", etc.
  deletedBy       String?   // user who deleted it
  deletedAt       DateTime  @default(now())
}

// ‚úèÔ∏è Logs all manual updates to inventory items
model InventoryUpdate {
  id              String   @id @default(cuid())
  liveItemId      String?
  productId       String?
  productName     String?
  sku             String?
  oldQuantity     Int?
  newQuantity     Int?
  oldCostPrice    Float?
  newCostPrice    Float?
  oldRetailPrice  Float?
  newRetailPrice  Float?
  oldDeliveryDate DateTime?
  newDeliveryDate DateTime?
  oldExpiryDate   DateTime?
  newExpiryDate   DateTime?
  creditChanged   Boolean?
  storeId         String?
  updatedBy       String?
  updatedAt       DateTime  @default(now())
}

model PromoUpdate {
  id         String   @id @default(cuid())
  promoId    String
  oldData    String
  newData    String
  updatedBy  String
  createdAt  DateTime @default(now())
}

model DeletedPromo {
  id           String   @id @default(cuid())
  promoId      String
  product      String
  sku          String
  expiry       DateTime
  quantity     Int
  costPrice    Float
  retailPrice  Float
  promoPrice   Float
  credit       Boolean
  storeId      String?
  reason       String
  deletedBy    String
  deletedAt    DateTime @default(now())
}