generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Store {
  id         String          @id @default(cuid())
  name       String          @unique
  location   String?
  createdAt  DateTime        @default(now())
  updatedAt  DateTime        @updatedAt
  expired    ExpiredItem[]
  gasPrices  GasPrice[]
  inventory  LiveInventory[]
  promoItems PromoItem[]
  users      User[]
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String
  password  String
  role      Role
  storeId   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  store     Store?   @relation(fields: [storeId], references: [id])
}

model Product {
  id             String          @id @default(cuid())
  name           String
  sku            String          @unique
  category       String
  brand          String
  defaultCost    Float
  defaultPrice   Float
  returnable     Boolean
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  quantityPerBox Int
  expiredItems   ExpiredItem[]
  inventory      LiveInventory[]
}

model LiveInventory {
  id           String    @id @default(cuid())
  productId    String
  expiry       DateTime
  quantity     Int
  costPrice    Float
  credit       Boolean
  deliveryDate DateTime
  storeId      String?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  retailPrice  Float
  lastSoldAt   DateTime?
  notes        String?
  reorderFlag  Boolean?
  product      Product   @relation(fields: [productId], references: [id])
  store        Store?    @relation(fields: [storeId], references: [id])
}

model PromoItem {
  id           String   @id @default(cuid())
  product      String
  sku          String
  expiry       DateTime
  quantity     Int
  credit       Boolean
  urgency      String
  strategy     String
  promoType    String
  promoPrice   Float
  costPrice    Float
  regularPrice Float
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  storeId      String?
  store        Store?   @relation(fields: [storeId], references: [id])
}

model ExpiredItem {
  id        String   @id @default(cuid())
  productId String
  quantity  Int
  expiry    DateTime
  credit    Boolean
  removedAt DateTime @default(now())
  storeId   String
  product   Product  @relation(fields: [productId], references: [id])
  store     Store    @relation(fields: [storeId], references: [id])
}

model GasPrice {
  id        String   @id @default(cuid())
  type      String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  name      String
  priceCard Float
  priceCash Float
  storeId   String
  store     Store    @relation(fields: [storeId], references: [id])
}

model DeletedInventory {
  id           String    @id @default(cuid())
  liveItemId   String?
  productId    String?
  productName  String?
  sku          String?
  quantity     Int?
  costPrice    Float?
  retailPrice  Float?
  credit       Boolean?
  storeId      String?
  deliveryDate DateTime?
  expiryDate   DateTime?
  reason       String?
  deletedBy    String?
  deletedAt    DateTime  @default(now())
}

model InventoryUpdate {
  id              String    @id @default(cuid())
  liveItemId      String?
  productId       String?
  productName     String?
  sku             String?
  oldQuantity     Int?
  newQuantity     Int?
  oldCostPrice    Float?
  newCostPrice    Float?
  oldRetailPrice  Float?
  newRetailPrice  Float?
  oldDeliveryDate DateTime?
  newDeliveryDate DateTime?
  oldExpiryDate   DateTime?
  newExpiryDate   DateTime?
  creditChanged   Boolean?
  storeId         String?
  updatedBy       String?
  updatedAt       DateTime  @default(now())
}

model PromoUpdate {
  id        String   @id @default(cuid())
  promoId   String
  oldData   String
  newData   String
  updatedBy String
  createdAt DateTime @default(now())
}

model DeletedPromo {
  id          String   @id @default(cuid())
  promoId     String
  product     String
  sku         String
  expiry      DateTime
  quantity    Int
  costPrice   Float
  retailPrice Float
  promoPrice  Float
  credit      Boolean
  storeId     String?
  reason      String
  deletedBy   String
  deletedAt   DateTime @default(now())
}

enum Role {
  OWNER
  MANAGER
  CASHIER
  EMPLOYEE
}
